// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  phone     String?
  avatar    String?
  orders    Order[]
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  category    String
  image       String?
  isAvailable Boolean     @default(true)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  total      Decimal     @db.Decimal(10, 2)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id        String        @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  time      DateTime
  guests    Int
  status    BookingStatus @default(PENDING)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id            String          @id @default(uuid())
  name          String
  rating        Float          @default(0)
  totalReviews  Int           @default(0)
  licenseNumber String?
  licenseType   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  operatingHours OperatingHours[]
  promotions     Promotion[]
}

model OperatingHours {
  id           String     @id @default(uuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  days         String
  hours        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Promotion {
  id                 String     @id @default(uuid())
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId       String
  discountPercentage Int
  minimumOrder       Decimal    @db.Decimal(10, 2)
  description        String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
