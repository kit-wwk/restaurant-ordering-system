generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  role      Role       @default(CUSTOMER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  avatar    String?
  phone     String?
  lastLogin DateTime?
  status    UserStatus @default(ACTIVE)
  bookings  Booking[]
  orders    Order[]
}

model Category {
  id           String            @id @default(uuid())
  name         String            @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  restaurantId String
  restaurant   RestaurantProfile @relation(fields: [restaurantId], references: [id])
  items        MenuItem[]

  @@index([restaurantId])
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  orderItems  OrderItem[]

  @@index([categoryId])
}

model Order {
  id            String      @id @default(uuid())
  userId        String?
  status        OrderStatus @default(PENDING)
  subtotal      Decimal     @db.Decimal(10, 2)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  total         Decimal     @db.Decimal(10, 2)
  promotionId   String?
  promotion     Promotion?  @relation(fields: [promotionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  guestEmail    String?
  guestName     String?
  guestPhone    String?
  user          User?       @relation(fields: [userId], references: [id])
  items         OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
  @@index([promotionId])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])

  @@index([menuItemId], map: "OrderItem_menuItemId_fkey")
  @@index([orderId], map: "OrderItem_orderId_fkey")
}

model Booking {
  id         String        @id @default(uuid())
  userId     String?
  date       DateTime
  time       DateTime
  guests     Int
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  guestEmail String?
  guestName  String?
  guestPhone String?
  user       User?         @relation(fields: [userId], references: [id])

  @@index([userId], map: "Booking_userId_fkey")
}

model Promotion {
  id                 String            @id @default(uuid())
  restaurantId       String
  restaurant         RestaurantProfile @relation(fields: [restaurantId], references: [id])
  discountPercentage Int
  minimumOrder       Decimal           @db.Decimal(10, 2)
  description        String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isAutoApplied      Boolean           @default(false)
  orders            Order[]

  @@index([restaurantId])
}

model RestaurantProfile {
  id                String      @id @default("default")
  name              String
  description       String?     @db.Text
  address           String
  phone             String
  email             String?
  openingHours      Json
  facebook          String?
  instagram         String?
  logoUrl           String?
  bannerUrl         String?
  maxBookingDays    Int         @default(14)
  maxBookingPerSlot Int         @default(10)
  maxTableSize      Int         @default(12)
  currency          String      @default("HKD")
  taxRate           Float       @default(0)
  serviceCharge     Float       @default(0)
  metaTitle         String?
  metaDescription   String?     @db.Text
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  licenseNumber     String?
  rating            Float       @default(4.5)
  totalReviews      Int         @default(0)
  website           String?
  categories        Category[]
  promotions        Promotion[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
